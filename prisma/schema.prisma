// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model CricketFarm {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  location String
  // TODO: After implementing a map library these Latitude and Longitude values will be used to place the markers for cricket farm locations
  // latitude        Float
  // longitude       Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  BreedingPen BreedingPen[]

  @@map("cricketFarm")
}

model BreedingPen {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  breedingPenCode String
  cricketType     String

  cricketFarmId   String            @db.ObjectId
  cricketFarm     CricketFarm       @relation(fields: [cricketFarmId], references: [id], onDelete: Cascade)
  CricketFeedData CricketFeedData[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("breedingPen")
}

model CricketFeedData {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  productionCycle  Int
  feedAmountUsed   Int
  feedSource       String
  harvestStartDate DateTime
  harvestEndDate   DateTime?
  cycleStatus      String
  cycleAge         Int
  feedConsumption  Int
  cricketYield     Int
  comment          String?

  BreedingPen   BreedingPen? @relation(fields: [breedingPenId], references: [id])
  breedingPenId String       @db.ObjectId
  userId        String       @db.ObjectId
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cricketFeedData")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  CricketFeedData CricketFeedData[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
